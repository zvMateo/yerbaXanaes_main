import jwt from 'jsonwebtoken';

// ‚úÖ Funci√≥n principal de protecci√≥n para admin
export const protectAdmin = async (req, res, next) => {
  try {
    // ‚úÖ En desarrollo, omitir autenticaci√≥n
    if (process.env.NODE_ENV === 'development') {
      console.log('üîß Modo desarrollo: omitiendo autenticaci√≥n de admin');
      req.admin = { 
        id: 'dev-admin', 
        email: 'admin@dev.com',
        role: 'admin'
      };
      return next();
    }

    // ‚úÖ En producci√≥n, validar token
    const token = req.header('Authorization')?.replace('Bearer ', '');
    
    if (!token) {
      return res.status(401).json({ 
        success: false, 
        message: 'No token, autorizaci√≥n denegada' 
      });
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'default_secret');
    
    if (decoded.role !== 'admin') {
      return res.status(403).json({ 
        success: false, 
        message: 'Acceso denegado. Se requieren permisos de administrador.' 
      });
    }

    req.admin = decoded;
    next();
  } catch (error) {
    console.error('‚ùå Error en protectAdmin:', error);
    res.status(401).json({ 
      success: false, 
      message: 'Token inv√°lido' 
    });
  }
};

// ‚úÖ Middleware gen√©rico (alias para compatibilidad)
export const authMiddleware = protectAdmin;

// ‚úÖ Exportaci√≥n por defecto
export default protectAdmin;