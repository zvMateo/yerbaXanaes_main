import axios from 'axios';

// ‚úÖ Configuraci√≥n de base URL din√°mica
const getBaseURL = () => {
  // En producci√≥n, usar variable de entorno
  if (import.meta.env.PROD) {
    return import.meta.env.VITE_API_URL || 'https://api.yerbaxanaes.com';
  }
  
  // En desarrollo, intentar localhost primero
  return import.meta.env.VITE_API_URL || 'http://localhost:5000/api';
};

const apiClient = axios.create({
  baseURL: getBaseURL(),
  timeout: 10000, // ‚úÖ Timeout m√°s generoso
  headers: {
    'Content-Type': 'application/json',
  },
});

// ‚úÖ Interceptor de request mejorado
apiClient.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('authToken');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    
    // ‚úÖ Log solo en desarrollo
    if (import.meta.env.DEV) {
      console.log(`üîÑ ${config.method?.toUpperCase()} ${config.url}`);
    }
    
    return config;
  },
  (error) => {
    console.error('‚ùå Error en request:', error);
    return Promise.reject(error);
  }
);

// ‚úÖ Interceptor de response optimizado
apiClient.interceptors.response.use(
  (response) => {
    if (import.meta.env.DEV) {
      console.log(`‚úÖ ${response.config.method?.toUpperCase()} ${response.config.url} - ${response.status}`);
    }
    return response;
  },
  (error) => {
    // ‚úÖ Manejo de errores espec√≠ficos sin logs excesivos
    if (error.code === 'ERR_NETWORK') {
      error.message = 'Error de conexi√≥n. Verifica tu internet.';
    } else if (error.code === 'ECONNABORTED') {
      error.message = 'Tiempo de espera agotado. Intenta nuevamente.';
    } else if (error.response?.status === 401) {
      error.message = 'Sesi√≥n expirada. Por favor, inicia sesi√≥n nuevamente.';
      // ‚úÖ Auto-logout en 401
      localStorage.removeItem('authToken');
      window.location.href = '/login';
    } else if (error.response?.status >= 500) {
      error.message = 'Error del servidor. Intenta m√°s tarde.';
    }
    
    // ‚úÖ Log m√≠nimo para debugging
    console.warn(`‚ö†Ô∏è API Error:`, error.message);
    
    return Promise.reject(error);
  }
);

export default apiClient;